def ofRoot(){ return '../../../' }

// Load common functions
apply from: ofRoot()+"libs/openFrameworksCompiled/project/android/common-functions.gradle"

buildscript {
    apply from: "../../../libs/openFrameworksCompiled/project/android/ndk-verify.gradle"

    repositories {
        jcenter()
        maven {
            // All of React Native (JS, Android binaries) is installed from npm
            url "/usr/local/google/home/gfan/tmp/test/node_modules/react-native/android"
        }
    }
    dependencies {
        // Using the gradle-experimental version that supports c++
        classpath 'com.android.tools.build:gradle-experimental:0.9.3'
        classpath 'com.android.tools.build:gradle:2.3.3'
    }
}

allprojects {
    repositories {
        jcenter()
    }

}

apply plugin: 'com.android.application'
// apply plugin: 'com.android.model.application'

    android {
        // openFrameworks currently only supports compiling against SDK 19
        compileSdkVersion = 25
        buildToolsVersion = 25

        defaultConfig {
            minSdkVersion    19
            targetSdkVersion 25
            versionCode     =  1
            versionName     = "1.0"
            ndk.abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            externalNativeBuild.cmake {
                arguments '-DANDROID_TOOLCHAIN=gcc', '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-19'
                cppFlags "-v"
            }
        }
        sourceSets.main {
            assets.srcDirs = ['bin/data'] + addonData(ofRoot())
            manifest.srcFile "./AndroidManifest.xml"
            res.srcDirs = ["res"]
            java.srcDirs = ['srcJava']
            aidl.srcDirs = ['srcJava']
            renderscript.srcDirs = ['srcJava']

        }

        lintOptions {
            abortOnError  = false
        }

        buildTypes {
            release {
                minifyEnabled = false
            }
        }

        externalNativeBuild.cmake {
            path "./src/CMakeLists.txt"
        }
        android.productFlavors {
            getAbis().each { abi ->
                create(getFlavorName(abi)) {
                    ndk {
                        abiFilters abi

                        // cppFlags coreCppFlags(abi, ofRoot())
                        // cppFlags addonCppFlags(abi, ofRoot())

//                        ldLibs.addAll(coreLdLibs(abi, ofRoot()))
//                        ldLibs.addAll(addonLdLibs(abi, ofRoot()))

//                        ldFlags.addAll(coreLdFlags(abi, ofRoot()))
//                        ldFlags.addAll(addonLdFlags(abi, ofRoot()))
                    }
                    externalNativeBuild.cmake {
                        cppFlags +=coreCppFlags(abi, ofRoot())
                        cppFlags +=addonCppFlags(abi, ofRoot())
                    }
                }
            }
        }

    }
/*    android.sources {
        main {
            jni {
                source {
                                 excludes = srcExcludes(ofRoot())
                }

                // Link to openFrameworks
                dependencies {
                    project ":openFrameworksProject"  linkage "static"
                }
            }

            manifest {
                source {
                    srcDirs = [ "." ]
                }
            }
            res {
                source {
                    srcDirs = [ "res" ]
                }
            }
            java {
                source {
                    srcDirs = [ "srcJava" ]
                }
            }
            aidl {
                source{
                    srcDirs = ['srcJava']
                }
            }
            renderscript{
                source{
                    srcDirs = ['srcJava']
                }
            }
            jniLibs {
                source {
                    srcDirs = ['libs']
                }
            }
            assets {
                source {
                    srcDirs = ['bin/data'] + addonData(ofRoot())
                }
            }
        }

    }

    // Setup the different types of flavors (arm / x86),
    // and add linker flags based on that
    android.productFlavors {
        getAbis().each { abi ->
            create(getFlavorName(abi)) {
                ndk {
                    abiFilters.add(abi)

                    cppFlags.addAll(coreCppFlags(abi, ofRoot()))
                    cppFlags.addAll(addonCppFlags(abi, ofRoot()))

                    ldLibs.addAll(coreLdLibs(abi, ofRoot()))
                    ldLibs.addAll(addonLdLibs(abi, ofRoot()))

                    ldFlags.addAll(coreLdFlags(abi, ofRoot()))
                    ldFlags.addAll(addonLdFlags(abi, ofRoot()))
                }
            }
        }
    }
*/
// apply plugin: 'com.android.application'

dependencies {
    addonJavaDependencies(ofRoot()).each { dep ->
        compile(project(path: dep[1] ))
    }
    srcIncludes(ofRoot()).each { flag ->
        printLn flag[1]
    }

    compile project(path: ':ofAndroidLib')
//    compile project(':openFrameworksProject')
    compile "com.facebook.react:react-native:+"
}
